using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using note_backend.Entities;
using note_backend.Models;
using note_backend.Services;

namespace note_backend.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController(IAuthService authService) : ControllerBase
    {
        [HttpPost("register")]
        public async Task<ActionResult<User>> Register(UserDto request)
        {
            var user = await authService.RegisterAsync(request);
            if (user is null)
            {
                return BadRequest("User already exists");
            }

            return Ok(user);
        }


        [HttpPost("login")]
        public async Task<ActionResult<TokenResponseDto>> Login(UserDto request)
        {
              var token = await authService.LoginAsync(request);
              if (token is null)
              {
                    return Unauthorized("Invalid username or password");
              }

            var cookieOptions = new CookieOptions
            {
                HttpOnly = true,
                Expires = DateTime.UtcNow.AddHours(1),
                SameSite = SameSiteMode.None,
                Secure = true
            };

            Response.Cookies.Append("accessToken", token.AccessToken, cookieOptions);

            cookieOptions.Expires = DateTime.UtcNow.AddDays(7);

            Response.Cookies.Append("refreshToken", token.RefreshToken, cookieOptions);


            return Ok(token);
        }

        [HttpPost("refresh-token")]
        public async Task<ActionResult<TokenResponseDto>> RefreshToken(RefreshTokenRequestDto request)
        {
            var results = await authService.RefreshTokensAsync(request);
            if (results is null || results.AccessToken is null || results.RefreshToken is null)
            {
                return Unauthorized("Invalid refresh token");
            }

            return Ok(results);
        }

        [HttpGet("verify")]
        public async Task<IActionResult> Verify()
        {
            if (!Request.Cookies.TryGetValue("refreshToken", out var refreshToken))
            {
                return Unauthorized("No refresh token found.");
            }

            var request = new RefreshTokenRequestDto { RefreshToken = refreshToken };
            var results = await authService.RefreshTokensAsync(request);
            if (results is null || results.AccessToken is null || results.RefreshToken is null)
            {
                // Also clear the invalid refresh token cookie
                var deleteCookieOptions = new CookieOptions
                {
                    HttpOnly = true,
                    SameSite = SameSiteMode.None,
                    Secure = true
                };
                Response.Cookies.Delete("refreshToken", deleteCookieOptions);
                return Unauthorized("Invalid refresh token");
            }

            var cookieOptions = new CookieOptions
            {
                HttpOnly = true,
                Expires = DateTime.UtcNow.AddHours(1),
                SameSite = SameSiteMode.None,
                Secure = true
            };

            Response.Cookies.Append("accessToken", results.AccessToken, cookieOptions);

            cookieOptions.Expires = DateTime.UtcNow.AddDays(7);

            Response.Cookies.Append("refreshToken", results.RefreshToken, cookieOptions);

            return Ok("Token refreshed successfully");
        }


        [HttpGet("logout")]
        public ActionResult Logout()
        {
            var cookieOptions = new CookieOptions
            {
                HttpOnly = true,
                SameSite = SameSiteMode.None,
                Secure = true
            };
            Response.Cookies.Delete("accessToken", cookieOptions);
            Response.Cookies.Delete("refreshToken", cookieOptions);
            return Ok("Logout Successful");
        }
    }


}
